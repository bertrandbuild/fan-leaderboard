const { ethers } = require("hardhat");
const fs = require('fs');
const path = require('path');

async function main() {
  console.log("🚀 Starting Chiliz Chain Development Setup...");
  
  // Check if private key is provided
  if (!process.env.PRIVATE_KEY) {
    console.log("❌ No private key found in environment variables");
    console.log("📋 Please set up your environment:");
    console.log("1. Copy contracts/.env.example to contracts/.env");
    console.log("2. Add your private key to the .env file");
    console.log("3. Get testnet CHZ from: https://faucet.chiliz.com");
    console.log("4. Run: npm run setup");
    process.exit(1);
  }
  
  const [deployer] = await ethers.getSigners();
  
  console.log("📝 Deploying contracts with account:", deployer.address);
  
  // Check balance
  const balance = await deployer.provider.getBalance(deployer.address);
  console.log("💰 Account balance:", ethers.formatEther(balance), "CHZ");
  
  if (balance < ethers.parseEther("0.1")) {
    console.log("⚠️  Low balance! You might need more CHZ from the faucet");
    console.log("🔗 Get testnet CHZ: https://faucet.chiliz.com");
  }
  
  // Deploy CampaignFactory
  console.log("\n📦 Deploying CampaignFactory...");
  const CampaignFactory = await ethers.getContractFactory("CampaignFactory");
  const campaignFactory = await CampaignFactory.deploy();
  
  await campaignFactory.waitForDeployment();
  
  const contractAddress = await campaignFactory.getAddress();
  console.log("✅ CampaignFactory deployed to:", contractAddress);
  
  // Get PSG token addresses
  const [psgUnwrapped, psgWrapped] = await campaignFactory.getPSGTokens();
  console.log("🏆 PSG Unwrapped Token:", psgUnwrapped);
  console.log("🏆 PSG Wrapped Token:", psgWrapped);
  
  // Verify the contract works
  console.log("\n🔍 Verifying contract functionality...");
  try {
    const supportedUnwrapped = await campaignFactory.isSupportedToken(psgUnwrapped);
    const supportedWrapped = await campaignFactory.isSupportedToken(psgWrapped);
    
    if (supportedUnwrapped && supportedWrapped) {
      console.log("✅ PSG tokens are properly supported");
    } else {
      console.log("❌ PSG token support verification failed");
    }
  } catch (error) {
    console.log("❌ Contract verification failed:", error.message);
  }
  
  // Save deployment info
  const deploymentInfo = {
    network: "chiliz",
    chainId: 88888,
    campaignFactory: contractAddress,
    psgUnwrapped: psgUnwrapped,
    psgWrapped: psgWrapped,
    deployer: deployer.address,
    deployedAt: new Date().toISOString(),
    blockNumber: await deployer.provider.getBlockNumber(),
    rpcUrl: "https://rpc.ankr.com/chiliz",
    explorerUrl: "https://testnet.chiliscan.com",
    faucetUrl: "https://faucet.chiliz.com"
  };
  
  // Write deployment info to contracts directory
  const deploymentPath = path.join(__dirname, '..', 'deployment.json');
  fs.writeFileSync(deploymentPath, JSON.stringify(deploymentInfo, null, 2));
  
  // Create backend environment configuration
  const backendEnvPath = path.join(__dirname, '..', '..', 'app', 'backend', '.env.contracts');
  const backendEnvContent = `# Chiliz Chain Contract Configuration
# Auto-generated by setup-dev.js - DO NOT EDIT MANUALLY

# Contract addresses
CAMPAIGN_FACTORY_ADDRESS=${contractAddress}
PSG_UNWRAPPED_TOKEN=${psgUnwrapped}
PSG_WRAPPED_TOKEN=${psgWrapped}

# Admin private key (same as deployment key)
ADMIN_PRIVATE_KEY=${process.env.PRIVATE_KEY}

# Network configuration
CHILIZ_RPC_URL=https://rpc.ankr.com/chiliz
CHILIZ_CHAIN_ID=88888

# Deployment info
DEPLOYED_AT=${deploymentInfo.deployedAt}
DEPLOYED_BY=${deployer.address}
BLOCK_NUMBER=${deploymentInfo.blockNumber}
`;
  
  fs.writeFileSync(backendEnvPath, backendEnvContent);
  
  // Create frontend configuration
  const frontendConfigPath = path.join(__dirname, '..', '..', 'app', 'frontend', 'src', 'config', 'contracts.ts');
  const frontendConfigContent = `// Chiliz Chain Contract Configuration
// Auto-generated by setup-dev.js - DO NOT EDIT MANUALLY

export const CONTRACTS_CONFIG = {
  CAMPAIGN_FACTORY_ADDRESS: '${contractAddress}',
  PSG_UNWRAPPED_TOKEN: '${psgUnwrapped}',
  PSG_WRAPPED_TOKEN: '${psgWrapped}',
  NETWORK: {
    chainId: 88888,
    name: 'Chiliz Chain',
    rpcUrl: 'https://rpc.ankr.com/chiliz',
    explorerUrl: 'https://testnet.chiliscan.com',
    faucetUrl: 'https://faucet.chiliz.com'
  }
} as const;

export const CHILIZ_CHAIN_CONFIG = {
  id: 88888,
  name: 'Chiliz Chain',
  network: 'chiliz',
  nativeCurrency: {
    decimals: 18,
    name: 'CHZ',
    symbol: 'CHZ',
  },
  rpcUrls: {
    default: {
      http: ['https://rpc.ankr.com/chiliz'],
    },
  },
  blockExplorers: {
    default: {
      name: 'Chiliz Scan',
      url: 'https://testnet.chiliscan.com',
    },
  },
} as const;
`;
  
  // Ensure the directory exists
  const configDir = path.dirname(frontendConfigPath);
  if (!fs.existsSync(configDir)) {
    fs.mkdirSync(configDir, { recursive: true });
  }
  
  fs.writeFileSync(frontendConfigPath, frontendConfigContent);
  
  console.log("\n📋 Setup Summary:");
  console.log("================");
  console.log("✅ CampaignFactory deployed to:", contractAddress);
  console.log("✅ Deployment info saved to:", deploymentPath);
  console.log("✅ Backend config saved to:", backendEnvPath);
  console.log("✅ Frontend config saved to:", frontendConfigPath);
  
  console.log("\n🎯 Next Steps:");
  console.log("==============");
  console.log("1. Add the backend config to your main .env file:");
  console.log("   source app/backend/.env.contracts >> app/backend/.env");
  console.log("2. Restart your backend server to load the new config");
  console.log("3. The frontend will automatically use the new contract addresses");
  console.log("4. You can now test campaign deployment with:");
  console.log("   POST /api/campaigns/:id/complete-blockchain");
  
  console.log("\n🔗 Useful Links:");
  console.log("================");
  console.log("📊 Contract on Explorer:", `https://testnet.chiliscan.com/address/${contractAddress}`);
  console.log("🏆 PSG Unwrapped Token:", `https://testnet.chiliscan.com/address/${psgUnwrapped}`);
  console.log("🏆 PSG Wrapped Token:", `https://testnet.chiliscan.com/address/${psgWrapped}`);
  console.log("💰 Get testnet CHZ:", "https://faucet.chiliz.com");
  
  console.log("\n🎉 Development setup completed successfully!");
  console.log("🔥 Your Fan Token campaigns are now ready for blockchain deployment!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("❌ Setup failed:", error);
    process.exit(1);
  }); 