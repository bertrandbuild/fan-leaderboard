// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  evmAddress String  @unique
  role      UserRole @default(USER)
  
  // Social Media IDs
  twitterId  String?
  youtubeId  String?
  telegramId String?
  tiktokId   String?
  
  // Relations
  tiktokProfile TiktokProfile? @relation(fields: [tiktokId], references: [id])
  fanTokens     UserFanToken[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

model TiktokProfile {
  id          String @id @default(cuid())
  username    String @unique
  displayName String?
  bio         String?
  followers   Int    @default(0)
  following   Int    @default(0)
  verified    Boolean @default(false)
  
  // Relations
  users User[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("tiktok_profiles")
}

model FanToken {
  id         String @id @default(cuid())
  evmAddress String @unique
  name       String
  symbol     String
  clubName   String?
  
  // Relations
  userTokens UserFanToken[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("fan_tokens")
}

model UserFanToken {
  id     String @id @default(cuid())
  userId String
  tokenId String
  balance String // Store as string to handle big numbers
  
  // Relations
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  token FanToken  @relation(fields: [tokenId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, tokenId])
  @@map("user_fan_tokens")
}

model AdminAddress {
  id         String @id @default(cuid())
  evmAddress String @unique
  isActive   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin_addresses")
}

enum UserRole {
  USER
  ADMIN
}
