#!/usr/bin/env ts-node

import { createUser } from '../database/db';
import { IUserCreateRequest, UserRole } from '../types';
import { randomBytes } from 'crypto';

/**
 * Script pour g√©n√©rer des utilisateurs de test en mode d√©veloppement
 * 
 * Usage:
 * npm run generate-users [nombre_utilisateurs]
 * 
 * Par d√©faut g√©n√®re 10 utilisateurs
 */

// Donn√©es de test vari√©es pour les comptes sociaux
const SAMPLE_TIKTOK_HANDLES = [
  'fan.football.bcn',
  'real.madrid.lover',
  'city.supporter',
  'psg.fanatic',
  'juventus.ultra',
  'bayern.munich.fan',
  'liverpool.kop',
  'arsenal.gunner',
  'chelsea.blue',
  'milan.rossoneri',
  'inter.nerazzurri',
  'atletico.rojiblanco',
  'dortmund.gelb',
  'ajax.amsterdam',
  'tottenham.coys'
];

const SAMPLE_TWITTER_IDS = [
  'footballfan2024',
  'soccer_enthusiast',
  'goals_and_glory',
  'stadium_vibes',
  'kickoff_king',
  'match_day_magic',
  'trophy_hunter',
  'pitch_perfect',
  'football_fever',
  'game_changer',
  'club_legend',
  'soccer_star',
  'field_master',
  'goal_getter',
  'sport_fanatic'
];

const SAMPLE_YOUTUBE_IDS = [
  'UCfootball-highlights2024',
  'UCsoccer-analysis-pro',
  'UCgoals-compilation',
  'UCstadium-atmosphere',
  'UCfan-reactions-live',
  'UCtactical-breakdown',
  'UCmatch-previews',
  'UCplayer-interviews',
  'UCteam-history',
  'UCfootball-news-daily',
  'UCsoccer-skills',
  'UCfan-zone-official',
  'UCfootball-legends',
  'UCgoal-celebrations',
  'UCsoccer-world-cup'
];

const SAMPLE_TELEGRAM_IDS = [
  'football_fanatic_2024',
  'soccer_lover_official',
  'goal_hunter_pro',
  'stadium_atmosphere',
  'match_day_hero',
  'football_news_live',
  'soccer_highlights',
  'fan_zone_chat',
  'football_tactics',
  'goal_celebrations',
  'soccer_community',
  'football_passion',
  'match_analysis',
  'soccer_updates',
  'football_world'
];

/**
 * G√©n√®re une adresse EVM al√©atoire valide
 */
function generateRandomEvmAddress(): string {
  const randomData = randomBytes(20);
  return '0x' + randomData.toString('hex');
}

/**
 * S√©lectionne un √©l√©ment al√©atoire d'un tableau
 */
function getRandomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

/**
 * G√©n√®re un utilisateur de test avec des donn√©es vari√©es
 */
function generateTestUser(index: number): IUserCreateRequest {
  const isClubAdmin = Math.random() < 0.2; // 20% de chance d'√™tre admin
  const role: UserRole = isClubAdmin ? 'club_admin' : 'user';
  
  // Probabilit√© d'avoir chaque type de compte social (70% chance pour chaque)
  const hasTikTok = Math.random() < 0.7;
  const hasTwitter = Math.random() < 0.7;
  const hasYouTube = Math.random() < 0.5; // Moins fr√©quent
  const hasTelegram = Math.random() < 0.6;
  
  const user: IUserCreateRequest = {
    evm_address: generateRandomEvmAddress(),
    role: role,
  };
  
  if (hasTikTok) {
    // Utilise les handles pr√©d√©finis ou g√©n√®re un nouveau bas√© sur l'index
    if (index < SAMPLE_TIKTOK_HANDLES.length) {
      user.tiktok_id = SAMPLE_TIKTOK_HANDLES[index];
    } else {
      user.tiktok_id = `test.user.${index}`;
    }
  }
  
  if (hasTwitter) {
    if (index < SAMPLE_TWITTER_IDS.length) {
      user.twitter_id = SAMPLE_TWITTER_IDS[index];
    } else {
      user.twitter_id = `testuser${index}_${Math.floor(Math.random() * 1000)}`;
    }
  }
  
  if (hasYouTube) {
    if (index < SAMPLE_YOUTUBE_IDS.length) {
      user.youtube_id = SAMPLE_YOUTUBE_IDS[index];
    } else {
      user.youtube_id = `UCtest-channel-${index}-${Math.floor(Math.random() * 1000)}`;
    }
  }
  
  if (hasTelegram) {
    if (index < SAMPLE_TELEGRAM_IDS.length) {
      user.telegram_id = SAMPLE_TELEGRAM_IDS[index];
    } else {
      user.telegram_id = `test_user_${index}_${Math.floor(Math.random() * 1000)}`;
    }
  }
  
  return user;
}

/**
 * Fonction principale pour g√©n√©rer les utilisateurs
 */
async function generateTestUsers(count: number = 10) {
  console.log(`üöÄ G√©n√©ration de ${count} utilisateurs de test...`);
  console.log('');
  
  const createdUsers = [];
  const errors = [];
  
  for (let i = 0; i < count; i++) {
    try {
      const userData = generateTestUser(i);
      
      console.log(`üë§ Cr√©ation de l'utilisateur ${i + 1}/${count}:`);
      console.log(`   - Adresse EVM: ${userData.evm_address}`);
      console.log(`   - R√¥le: ${userData.role}`);
      
      if (userData.tiktok_id) console.log(`   - TikTok: @${userData.tiktok_id}`);
      if (userData.twitter_id) console.log(`   - Twitter: @${userData.twitter_id}`);
      if (userData.youtube_id) console.log(`   - YouTube: ${userData.youtube_id}`);
      if (userData.telegram_id) console.log(`   - Telegram: @${userData.telegram_id}`);
      
      // Cr√©er l'utilisateur directement en base de donn√©es
      const userId = createUser({
        evm_address: userData.evm_address,
        role: userData.role,
        twitter_id: userData.twitter_id,
        youtube_id: userData.youtube_id,
        telegram_id: userData.telegram_id,
        tiktok_id: userData.tiktok_id,
      });
      
      createdUsers.push({
        id: userId,
        ...userData
      });
      
      console.log(`   ‚úÖ Utilisateur cr√©√© avec l'ID: ${userId}`);
      console.log('');
      
      // Petite pause pour √©viter de surcharger le syst√®me
      await new Promise(resolve => setTimeout(resolve, 100));
      
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Erreur inconnue';
      console.log(`   ‚ùå Erreur lors de la cr√©ation: ${errorMsg}`);
      console.log('');
      
      errors.push({
        index: i + 1,
        error: errorMsg,
        userData: generateTestUser(i)
      });
    }
  }
  
  // Affichage du r√©sum√©
  console.log('üìä R√©sum√© de la g√©n√©ration:');
  console.log(`   ‚úÖ Utilisateurs cr√©√©s avec succ√®s: ${createdUsers.length}`);
  console.log(`   ‚ùå Erreurs rencontr√©es: ${errors.length}`);
  console.log('');
  
  if (createdUsers.length > 0) {
    console.log('üë• Utilisateurs cr√©√©s:');
    createdUsers.forEach((user, index) => {
      const socialAccounts = [];
      if (user.tiktok_id) socialAccounts.push(`TikTok: @${user.tiktok_id}`);
      if (user.twitter_id) socialAccounts.push(`Twitter: @${user.twitter_id}`);
      if (user.youtube_id) socialAccounts.push(`YouTube: ${user.youtube_id}`);
      if (user.telegram_id) socialAccounts.push(`Telegram: @${user.telegram_id}`);
      
      console.log(`   ${index + 1}. ${user.evm_address} (${user.role})`);
      if (socialAccounts.length > 0) {
        console.log(`      R√©seaux sociaux: ${socialAccounts.join(', ')}`);
      }
    });
    console.log('');
  }
  
  if (errors.length > 0) {
    console.log('‚ùå Erreurs d√©taill√©es:');
    errors.forEach((error, index) => {
      console.log(`   ${index + 1}. Utilisateur ${error.index}: ${error.error}`);
    });
    console.log('');
  }
  
  console.log(`üéâ Script termin√© ! ${createdUsers.length} utilisateurs de test ont √©t√© cr√©√©s.`);
  
  if (createdUsers.length > 0) {
    console.log('');
    console.log('üí° Conseils:');
    console.log('   - Vous pouvez maintenant tester l\'application avec ces utilisateurs');
    console.log('   - Les adresses EVM g√©n√©r√©es sont al√©atoires mais valides');
    console.log('   - Utilisez l\'API /api/users pour r√©cup√©rer la liste compl√®te');
    console.log('   - Pour supprimer les donn√©es de test, utilisez l\'API DELETE sur chaque utilisateur');
  }
}

// Ex√©cution du script
async function main() {
  try {
    // V√©rifier que nous sommes en mode d√©veloppement
    if (process.env.NODE_ENV === 'production') {
      console.log('‚ùå Ce script ne peut √™tre ex√©cut√© qu\'en mode d√©veloppement !');
      console.log('   D√©finissez NODE_ENV=development pour continuer.');
      process.exit(1);
    }
    
    console.log('üîß Mode d√©veloppement d√©tect√© - OK');
    console.log('');
    
    // R√©cup√©rer le nombre d'utilisateurs √† cr√©er depuis les arguments
    const args = process.argv.slice(2);
    const userCount = args.length > 0 ? parseInt(args[0], 10) : 10;
    
    if (isNaN(userCount) || userCount <= 0) {
      console.log('‚ùå Nombre d\'utilisateurs invalide. Utilisation de la valeur par d√©faut (10).');
      await generateTestUsers(10);
    } else if (userCount > 100) {
      console.log('‚ö†Ô∏è  Nombre d\'utilisateurs limit√© √† 100 pour √©viter la surcharge.');
      await generateTestUsers(100);
    } else {
      await generateTestUsers(userCount);
    }
    
    process.exit(0);
  } catch (error) {
    console.error('üí• Erreur fatale lors de l\'ex√©cution du script:', error);
    process.exit(1);
  }
}

// Ex√©cuter seulement si ce fichier est appel√© directement
if (require.main === module) {
  main();
}

export { generateTestUsers, generateRandomEvmAddress };